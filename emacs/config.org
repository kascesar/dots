#+TITLE: Global configs
#+DESCRIPTION: Emacs configs
#+AUTHOR: Cesar Munoz

* Table of contents                                                              :TOC_4:
- [[#common-configs][Common configs]]
  - [[#smooth-scrolling][smooth scrolling]]
  - [[#tree-sitter-languajes][tree-sitter languajes]]
  - [[#babel-lenguajes][Babel lenguajes]]
  - [[#interfaz][Interfaz]]
  - [[#ajuste-de-lineas][Ajuste de lineas]]
  - [[#dired-fill-column-columnsrow][Dired, fill-column, columns/row]]
  - [[#reload-config][Reload config]]
  - [[#font][Font]]
  - [[#recent-files][Recent files]]
  - [[#ediff][ediff]]
- [[#keybindings][Keybindings]]
- [[#package-manager--elpaca-][Package Manager -elpaca-]]
  - [[#orderless][orderless]]
  - [[#tldr][TLDR]]
  - [[#projectile][Projectile]]
  - [[#flycheck][Flycheck]]
  - [[#imenu-list][Imenu-list]]
  - [[#ef-themes][Ef-themes]]
  - [[#denote][Denote]]
  - [[#denote-org][Denote-org]]
  - [[#denote-consult][denote-consult]]
  - [[#beacon][Beacon]]
  - [[#highlight-indent-guide][Highlight-indent-guide]]
  - [[#all-the-icons][All-the-icons]]
  - [[#dashboard][Dashboard]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#consult][Consult]]
  - [[#rainbow][rainbow]]
  - [[#org-01][ORG]]
    - [[#latex-in-org-mode][latex in org mode]]
    - [[#org-elipsis][org-elipsis]]
    - [[#org-toc-table-of-contents][org-toc (table of contents)]]
    - [[#org-agenda--super-agenda][org-agenda & super-agenda]]
    - [[#org-modern][org-modern]]
    - [[#org-modern-indent][org-modern-indent]]
    - [[#org-roam][org-roam]]
    - [[#org-roam-ui][org-roam-ui]]
    - [[#org-auto-fill][org-auto-fill]]
    - [[#olivetti][olivetti]]
  - [[#calendar][Calendar]]
  - [[#terraform][Terraform]]
  - [[#python][Python]]
  - [[#git-33][git]]
    - [[#magit][Magit]]
    - [[#git-gutter][git-gutter]]
    - [[#git-timemachine][git-timemachine]]
- [[#tempo][Tempo]]
- [[#end][end]]
- [[#latex][latex]]

* Common configs
** smooth scrolling

#+begin_src emacs-lisp
(pixel-scroll-precision-mode t)
#+end_src
** tree-sitter languajes
Descomentar la linea "mapc" para instalar los lenguajes
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
     '((bash "https://github.com/tree-sitter/tree-sitter-bash")
       (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile" "main" "src")
       (cmake "https://github.com/uyha/tree-sitter-cmake")
       (css "https://github.com/tree-sitter/tree-sitter-css")
       (elisp "https://github.com/Wilfred/tree-sitter-elisp")
       (go "https://github.com/tree-sitter/tree-sitter-go")
       (html "https://github.com/tree-sitter/tree-sitter-html")
       (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
       (json "https://github.com/tree-sitter/tree-sitter-json")
       (make "https://github.com/alemuller/tree-sitter-make")
       (markdown "https://github.com/ikatyang/tree-sitter-markdown")
       (python "https://github.com/tree-sitter/tree-sitter-python")
       (toml "https://github.com/tree-sitter/tree-sitter-toml")
       (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
       (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
       (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  ;; decomentame si quieres obtener los repositorios
  ;;(mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))

  (setq major-mode-remap-alist
      '((bash-mode . bash-ts-mode)
        (dockerfile-mode . dockerfile-ts-mode)
        (cmake-mode . cmake-ts-mode)
        (css-mode . css-ts-mode)
        (html-mode . html-ts-mode)
        (js-mode . js-ts-mode)
        (js2-mode . js-ts-mode)
        (json-mode . json-ts-mode)
        (makefile-mode . make-ts-mode)
        (markdown-mode . markdown-ts-mode)
        (toml-mode . toml-ts-mode)
        (typescript-mode . typescript-ts-mode)
        (yaml-mode . yaml-ts-mode)))
#+end_src

** Babel lenguajes
#+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (scheme . t)
       ;(mermaid .t )
       ))
#+END_SRC
** Interfaz
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (add-to-list 'default-frame-alist '(undecorated . t))
  (global-visual-line-mode nil)
  (setq inhibit-startup-screen t)    ;; Desactiva la pantalla de inicio
  (setq inhibit-startup-message t)   ;; Desactiva el mensaje de inicio
#+END_SRC
** Ajuste de lineas
#+begin_src emacs-lisp :results silent
;; hace que las lineas se extiendan mas aya del editor si es necesario
(global-visual-line-mode -1)
(setq-default truncate-lines t)
#+end_src

** Dired, fill-column, columns/row
#+BEGIN_SRC emacs-lisp
  ;; Mostrar el número de columna en el modo de línea
  (column-number-mode)

  ;; Desactivar la visualización de números de columna en org-mode
  (add-hook 'org-mode-hook (lambda () (column-number-mode -1)))
  ;; Habilitar los números de línea en la izquierda en modos de programación
  (add-hook 'prog-mode-hook
            (lambda ()
              (display-line-numbers-mode 1)))
  ;; Ajustar el formato de los números de línea con espacio adicional
  (setq display-line-numbers-width-start t)
  (setq dired-listing-switches "-alh --group-directories-first")
  ;; Ocultar archivos ocultos en dired
  (require 'dired-x)
  (setq dired-omit-files "^\\...+$")
  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))

  ;; dont ask when kill buffer
  (global-set-key [remap kill-buffer] #'kill-this-buffer)

  ;; fill-column
  (setq fill-column 80)
#+END_SRC

** Reload config
#+begin_src emacs-lisp
(defun reload-config ()
  (interactive)
  (load-file user-init-file))
#+end_src

** Font
#+begin_src emacs-lisp
(set-frame-font "DejaVu Sans Mono-13" nil t)
#+end_src

** Recent files
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :defer 2
  :bind ("C-c C-r" . recentf-open-files)
  :init (recentf-mode)
  :custom
  (recentf-max-menu-items 10)
  (recentf-max-saved-items 50)
  (recentf-exclude (list "COMMIT_EDITMSG"
                         "~$"
                         "/scp:"
                         "/ssh:"
                         "/sudo:"
                         "diario.*"
                         "recentf*"
                         "bookmark*"
                         "/archivo*"
                         "birthday*"
                         "*elpa/*"
                         "/tmp/"
                         "drafts/*"
                         "/.elfeed"
                         "/.telega"
                         "/.config"
                         "~/.emacs.d/s*"))
    :config (run-at-time nil (* 5 60) 'recentf-save-list))
#+END_SRC
** ediff
Configuracion de ediff tomada del [[https://protesilaos.com/emacs/dotemacs#h:89edea05-4d94-4ea1-b2a8-5ad01422618c][la configuracion de prot]] esta
configuracion mejora enormemente la integracion natural de como se
comporta un visor de diferencia de archvo volvindolo mas natiural quie
el por defecto.
#+begin_src emacs-lisp
;;;; `ediff'
(use-package ediff
  :ensure nil
  :commands (ediff-buffers ediff-files ediff-buffers3 ediff-files3)
  :init
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  :config
  (setq ediff-keep-variants nil)
  (setq ediff-make-buffers-readonly-at-startup nil)
  (setq ediff-merge-revisions-with-ancestor t)
  (setq ediff-show-clashes-only t))
#+end_src
* Keybindings
#+BEGIN_SRC emacs-lisp
    ;; Additional configurations
    ;;(global-set-key (kbd "C-x k") 'kill-this-buffer)
    (global-set-key (kbd "C-x k") 'kill-current-buffer)
    ;; Move between windows using Meta key
    (global-set-key [M-left] 'windmove-left)
    (global-set-key [M-right] 'windmove-right)
    (global-set-key [M-up] 'windmove-up)
    (global-set-key [M-down] 'windmove-down)

    ;; Zoom in/out with mouse
    (global-set-key [C-mouse-4] 'text-scale-increase)
    (global-set-key [C-mouse-5] 'text-scale-decrease)

    ;; Incrementa el tamaño de la fuente
    (global-set-key (kbd "C-+") 'text-scale-increase)
    ;; Disminuye el tamaño de la fuente
    (global-set-key (kbd "C--") 'text-scale-decrease)

    ;; undo and redo
    (global-unset-key (kbd "C-z"))
    (global-set-key (kbd "C-z") 'undo)

    ;; org-agenda
    (global-set-key (kbd "<f7>") 'org-agenda)
    ;; F10 para ir al Dashboard
    (global-set-key (kbd "<f10>") 'dashboard-open)

    ;; recen files
    (global-set-key (kbd "C-c r") 'consult-recent-file)


    ;; org-roam
    (global-set-key (kbd "C-c n l") 'org-roam-buffer-toggle)
    (global-set-key (kbd "C-c n f") 'org-roam-node-find)
    (global-set-key (kbd "C-c n i") 'org-roam-node-insert)
#+END_SRC
* Package Manager -elpaca-
#+BEGIN_SRC emacs-lisp
  (defvar elpaca-installer-version 0.8)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
  				:ref nil :depth 1
  				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
  				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
  	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
  	 (order (cdr elpaca-order))
  	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
  	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
  		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
  						   ,@(when-let ((depth (plist-get order :depth)))
  						       (list (format "--depth=%d" depth) "--no-single-branch"))
  						   ,(plist-get order :repo) ,repo))))
  		   ((zerop (call-process "git" nil buffer t "checkout"
  					 (or (plist-get order :ref) "--"))))
  		   (emacs (concat invocation-directory invocation-name))
  		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
  					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
  		   ((require 'elpaca))
  		   ((elpaca-generate-autoloads "elpaca" repo)))
  	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
  	    (error "%s" (with-current-buffer buffer (buffer-string))))
  	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
  (elpaca elpaca-use-package
  :ensure t
  (elpaca-use-package-mode))
#+END_SRC
** orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src 
** TLDR
#+begin_src emacs-lisp
  (elpaca tldr
    :ensure t)
  (setq tldr-enabled-categories '("linux"))
#+end_src

** Projectile
#+begin_src emacs-lisp :results silent
  (elpaca projectile
    :ensure t)
#+end_src
** Flycheck
#+begin_src emacs-lisp :results silent
  (elpaca flycheck
    :ensure t
    :init(global-flycheck-mode))
#+end_src

** Imenu-list
Esto permite explorar mis programas de manera mas rapida e inteligente
#+begin_src emacs-lisp :results silent
  (elpaca imenu-list
    :ensure t)
  ;(setq imenu-list-focus-after-activation t)
  (setq imenu-list-auto-resize t)
  ;; seteamos los shortcuts
  (global-set-key (kbd "C-c i") #'imenu-list-smart-toggle)
#+end_src

** Ef-themes

Estos son los /ef-themes/, esta configuracion setea el /theme/ que mas me
gusta por defecto /-summer-./ Ademas, gracias a las cualidades de
/ef-themes/ puedes seleccionar mas de un tema con el cual cambiar.

Ademas, tengo configurado que dependiendo de la hora uso el tema claro
o el oscuro.
#+BEGIN_SRC emacs-lisp
    (use-package ef-themes
      :ensure t
      :demand t
      :config
      ;(load-theme 'ef-rosa :no-confirm)
      (ef-themes-load-random))
    (setq ef-themes-to-toggle '(ef-rosa ef-reverie))
#+END_SRC
** Denote
#+begin_src emacs-lisp
  (use-package denote
    :ensure (denote :host github :repo "protesilaos/denote")
    :hook (dired-mode . denote-dired-mode)
    :bind
    (("C-c n n" . denote)
     ("C-c n r" . denote-rename-file)
     ("C-c n l" . denote-link)
     ("C-c n b" . denote-backlinks)
     ("C-c n d" . denote-dired)
     ("C-c n g" . denote-grep))
    :config
    (setq denote-directory (expand-file-name "~/Dropbox/denote-notes/"))
    
    ;; Automatically rename Denote buffers when opening them so that
    ;; instead of their long file name they have, for example, a literal
    ;; "[D]" followed by the file's title.  Read the doc string of
    ;; `denote-rename-buffer-format' for how to modify this.
    (denote-rename-buffer-mode 1))
#+end_src
** Denote-org
#+begin_src emacs-lisp
  (use-package  denote-org
    :ensure '(denote-org :host github :repo "protesilaos/denote-org")
    :after denote
    :commands
    ;; I list the commands here so that you can discover them more
    ;; easily.  You might want to bind the most frequently used ones to
    ;; the `org-mode-map'.
    ( denote-org-link-to-heading
      denote-org-backlinks-for-heading

      denote-org-extract-org-subtree

      denote-org-convert-links-to-file-type
      denote-org-convert-links-to-denote-type

      denote-org-dblock-insert-files
      denote-org-dblock-insert-links
      denote-org-dblock-insert-backlinks
      denote-org-dblock-insert-missing-links
      denote-org-dblock-insert-files-as-headings))

#+end_src
** denote-consult

#+begin_src emacs-lisp

  (use-package consult-denote
    :ensure '(consult-denote :host github :repo "protesilaos/consult-denote")
    :bind
    (("C-c n f" . consult-denote-find)
     ("C-c n g" . consult-denote-grep))
    :config
    (consult-denote-mode 1))

#+end_src
** Beacon
#+BEGIN_SRC emacs-lisp :results silent
  ;; Desactivar el parpadeo del cursor y cambiarlo a tipo barra
  (blink-cursor-mode 0)
  (setq-default cursor-type 'bar)

  ;; Configuración de beacon usando elpaca
  (elpaca beacon
    :ensure t
  ;; Configurar el color del resplandor a un rozado muy fuerte
  (setq beacon-color "#FF69B4")

  ;; Reducir el tamaño del resplandor
  (setq beacon-size 20)

  ;; Variable para almacenar el tiempo desde el último movimiento del cursor
  (defvar my-last-cursor-move-time 0)

  ;; Función para mostrar el resplandor periódicamente cuando el cursor está quieto
  (defun my-beacon-periodic-blink ()
  "Muestra el resplandor si el cursor ha estado quieto por más de 1 segundo."
  (let ((idle-time (- (float-time) my-last-cursor-move-time)))
        (when (>= idle-time 1)  ;; Verificar si el cursor ha estado inactivo por 1 segundo
          (beacon-blink))))

    ;; Función para manejar el movimiento del cursor y el resplandor inmediato
  (defun my-beacon-on-cursor-move ()
      "Muestra el resplandor inmediatamente al mover el cursor y actualiza el tiempo."
      ;; Actualizar el tiempo del último movimiento del cursor
      (setq my-last-cursor-move-time (float-time))
      ;; Mostrar el resplandor inmediatamente
      (beacon-blink))

    ;; Ejecutar el resplandor periódico cada 0.8 segundos
    (run-with-timer 0 1 'my-beacon-periodic-blink)

    ;; Hook para mostrar el resplandor inmediatamente al mover el cursor
    (add-hook 'post-command-hook 'my-beacon-on-cursor-move)

    ;; Habilitar el modo beacon
    (beacon-mode 1))
#+END_SRC

** Highlight-indent-guide
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    ;; Configurar el método de guía de indentación a 'bitmap
    (setq highlight-indent-guides-method 'bitmap)
    ;; (setq highlight-indent-guides-character "|")
    ;; Configurar el color de los guías de indentación
    (custom-set-faces
     '(highlight-indent-guides-stack-odd-face ((t (:background "gray20"))))
     '(highlight-indent-guides-stack-even-face ((t (:background "gray40"))))
     '(highlight-indent-guides-character-face ((t (:foreground "dim gray"))))
     '(italic ((t (:slant italic))))))
#+END_SRC

** All-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
   :ensure t
   :if (display-graphic-p))

  (use-package all-the-icons-dired
  :ensure t
  :if (display-graphic-p))
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
    ;; Configuración del `dashboard` en Emacs usando `elpaca`
  (setq user-full-name "Cesar M.")
  (setq dashboard-icon-type 'all-the-icons) ;; Usa `all-the-icons` para íconos personalizados.

  (use-package dashboard
    :ensure t
    :config
    ;; Configuración básica de banner y título
    ;(global-page-break-lines-mode 1) ;; Habilita líneas de página a nivel global (requiere `page-break-lines`)

    ;; Configuración de banner
    (setq dashboard-startup-banner 'logo) ;; Usa el logo de Emacs
    (setq dashboard-banner-logo-title (format "Buen día %s" user-full-name))
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)

    ;; Configura los elementos a mostrar en el dashboard
    (setq dashboard-items '((recents   . 5)
                            (bookmarks . 5)
                            (agenda    . 5)
                            (projects  . 5)
                            (registers . 5)))

    ;; Habilita el dashboard en el inicio
    (dashboard-setup-startup-hook)

    ;; Configuración de íconos y navegación
    (setq dashboard-set-init-info t)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
          `(
            ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
              "GitHub" "Visitar mi GitHub" (lambda (&rest _) (browse-url "https://github.com/kascesar")))
             (,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
              "LinkedIn" "Visitar mi LinkedIn" (lambda (&rest _) (browse-url "https://linkedin.com/in/csarmaraya")))
             (,(all-the-icons-faicon "envelope" :height 1.1 :v-adjust 0.0)
              "Email" "Enviar un correo" (lambda (&rest _) (compose-mail))))))

    ;; Personaliza el orden de widgets
    (setq dashboard-startupify-list
          '(dashboard-insert-banner
            dashboard-insert-newline
            dashboard-insert-banner-title
            dashboard-insert-navigator
            dashboard-insert-init-info
            dashboard-insert-items
            dashboard-insert-footer))
  )
#+END_SRC

#+RESULTS:
: [nil 26400 1981 776364 nil elpaca-process-queues nil nil 323000 nil]

** Vertico
#+begin_src emacs-lisp :results silent
  (elpaca vertico
   :ensure t
   :config
   (setq vertico-cycle t)
   (setq vertico-resize nil)
   (vertico-mode 1))
#+end_src
** Marginalia
#+begin_src emacs-lisp :results silent
  (elpaca marginalia
    :ensure t
    :config
    (marginalia-mode 1))
#+end_src

** Consult
|---------+--------------------+---------------------------|
| keys    | order              | explicacion               |
|---------+--------------------+---------------------------|
| M-s M-g | counsult-grep      | buscar recursivamente     |
| M-s M-f | counsult-find      |                           |
| M-s M-o | counsult-outline   | buscar en el header       |
| C-x b   | counsult-bufer     | buscar en el bufer        |
| C-S     | consult-lile-multi | buscar en todos los bufer |
| C-s     | counsult-line      | buscar en el bufer        |
|---------+--------------------+---------------------------|
En el bufer puedes hacer las siguientes cosas
 + b SPC para /bufers/
 + SPC hiden /bufers/
 + * modified /bufers/
 + f Files
 + f Files registers
 + m SPC bookmarks
 + p Project
 + add custom for more
   
#+begin_src emacs-lisp :results silent
  (use-package consult
    :ensure t
    :bind (;; A recursive grep
           ("M-s M-g" . consult-grep)
           ;; Search for files names recursively
           ("M-s M-f" . consult-find)
           ;; Search through the outline (headings) of the file
           ("M-s M-o" . consult-outline)
           ("C-s" . consult-line)
           ("C-S" . consult-line-multi)
           ("C-x b" . consult-buffer)))
#+end_src

** rainbow
#+begin_src emacs-lisp
    (elpaca rainbow-mode
    :ensure t
    :demand t)
    (add-hook 'org-mode-hook 'rainbow-mode)
    (add-hook 'prog-mode-hook 'rainbow-mode)
#+end_src
** ORG [0/1]
- [X] instalacion de talext y otros para renderizar ecuaciones
- [X] elipsis icono para identificar que parte del archivo ha sido contraido
- [X] toc permite crear un indice interactivo en el archivo org
- [X] agenda y super-agenda gestores y mejoras de agenda de org-mode
- [X] modern agrega muchas mejoras visuales que emjoran la apariencia de los archivos org 
- [X] modern-ident mejora la identacion de los bloques de codigo (no me funciona)
- [X] bullets son unos cambios para las stars en org-mode 
  
#+BEGIN_SRC emacs-lisp :results silent
  ;; Aspecto mejorado al identar
  ;(add-hook 'org-mode-hook 'org-indent-mode)
  ;; recomendacion de codigo en org-mode
  (defun org-mode-setup ()
  (set (make-local-variable 'company-backends)
       '((company-dabbrev company-yasnippet)))) ;; Para sugerencias de palabras y snippets

  (add-hook 'org-mode-hook #'company-mode)
  (add-hook 'org-mode-hook #'org-mode-setup)
  (setq company-dabbrev-other-buffers t)

  ;; ocultamos los caracteres especiales
  (setq org-hide-emphasis-markers t)
#+END_SRC

#+begin_src emacs-lisp :results silent
  (defun org-mode-setup ()
  (set (make-local-variable 'company-backends)
       '((company-dabbrev company-yasnippet))))

  (add-hook 'org-mode-hook #'company-mode)
  (add-hook 'org-mode-hook #'org-mode-setup)
  (setq company-dabbrev-other-buffers t)

  ;; ocultamos los caracteres especiales
  (setq org-hide-emphasis-markers t)

  ;; configuraciones de tags y estado de las tareas

  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)

  (use-package org
  :config
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-todo-keywords
        '((sequence "PORHACER(p!)"
                    "ENPROCESO(e!)"
                    "BLOQUEADO(b!)"
                    "DETENIDO(d!)"
                    "|"
                    "HECHO(h!)"
                    "ARCHIVAR(a!)")))

   (setq org-todo-keyword-faces
         '(("PORHACER" . "red")
           ("ENPROCESO" . "magenta")
           ("BLOQUEADO" . "orange")
           ("HECHO" . "green")))

  (setq org-file-apps
      '(("\\.html\\'" . browse-url-firefox)))

  (advice-add 'org-refile :after 'org-save-all-org-buffers)


  (setq org-tag-alist '(("@nota" . ?n)
                        ("@casa" . ?c)
                        ("@finanzas" . ?d)
                        ("@fecha" . ?f)
                        ("@salud" . ?s)
                        ("@tarea" . ?t)
                        ("@coche" . ?h)
                        ("@trabajo" . ?b)
                        ("@personal" . ?p)
                        ("crypt" . ?C)
                        ("TOC_4" . ?i))
        )
  (setq org-tags-exclude-from-inheritance '("crypt"))

  ;; Progress Logging
  ;; When a TODO item enters DONE, add a CLOSED: property with current date-time stamp and into drawer
  ;(setq org-log-done 'time)
  ;(setq org-log-into-drawer "state-book")
  (setq org-tags-column 81))
#+end_src
*** latex in org mode
#+begin_src sh
    sudo apt install texlive texlive-latex-extra dvipng
  #+end_src

#+begin_src emacs-lisp
  (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-preview-latex-default-process 'dvipng)
#+end_src

Configuraciones que permiten enbellecer el soporte de latex en emacs
#+begin_src emacs-lisp
  (plist-put org-format-latex-options :scale 2.0)
  (setq org-pretty-entities t)
  (setq org-startup-with-latex-preview t)
#+end_src
*** org-elipsis
#+BEGIN_SRC emacs-lisp :results silent
  ;(use-package org
  ;:config
  ;(setq org-ellipsis  "⤵"))
  (use-package org
  :config
  (setq org-ellipsis (propertize " ⤵" 'face '(:height 1.5))))
#+END_SRC

*** org-toc (table of contents)
#+BEGIN_SRC emacs-lisp
  (elpaca toc-org
    :ensure t
    :demand t)
  (add-hook 'org-mode-hook 'toc-org-mode)
#+END_SRC
*** org-agenda & super-agenda
#+begin_src emacs-lisp
  (elpaca org-super-agenda
    :config
    (org-super-agenda-mode))

  (setq org-agenda-skip-scheduled-if-done t
  		org-agenda-skip-deadline-if-done t
  		org-agenda-compact-blocks t
  		org-agenda-window-setup 'current-window
  		org-agenda-start-on-weekday 1
  		org-deadline-warning-days 7
  		org-agenda-time-grid '((daily today))
  		org-agenda-custom-commands
  		'(
  		  ("x" "Vista trabajo"
  		   ((agenda "" ((org-agenda-span 3)
  				(org-super-agenda-groups
  				 '((:name "Hoy"
  					  :discard (:tag "@personal")
  					  :time-grid t
  					  :scheduled past
  					  :deadline past
  					  :date today
  					  :order 1)))))
  		    (alltodo "" ((org-agenda-overriding-header "")
  				 (org-super-agenda-groups
  				  '((:discard (:tag "personal" ))
  				    (:name "Vencimiento hoy"
  					   :deadline today
  					   :order 5)
  				    (:name "Próximamente"
  					   :deadline future
  					   :order 11)
  				    (:name "Atrasado"
  					   :scheduled past
  					   :deadline past
  					   :order 12)
  				    (:name "Por hacer"
  					    ;:discard (:scheduled future :deadline future)
  					   :todo "PORHACER"
  					   :order 12)
  				    (:name "Esperando"
  					   :todo "BLOQUEADO"
  					   :order 14)))))
  		    (tags "trabajo/HECHO"
  			  ((org-agenda-overriding-header " Tareas Hechas")))))

  		  ("z" "Vista personal"
  		   ((agenda "" ((org-agenda-span 3)
  				(org-super-agenda-groups
  				 '((:name "Hoy"
  					  :discard (:tag "@trabajo" :scheduled past :deadline past)
  					  :time-grid t
  					  :date today
  					  :scheduled today
  					  :order 1)
  				   (:name ""
  					  :tag "agenda"
  					  :todo "Aniversarios")))))
  		    (alltodo "" ((org-agenda-overriding-header "")
  				 (org-super-agenda-groups
  				  '((:discard (:tag "trabajo" ))
  				    (:name "Vencimiento hoy"
  					   :deadline today
  					   :order 5)
  				    (:name "Atrasado"
  					   :scheduled past
  					   :deadline past
  					   :order 11)
  				    (:name "Por hacer"
  					   :discard (:scheduled future :deadline future)
  					   :todo "PORHACER"
  					   :order 12)
  				    (:name "Esperando"
  					   :todo "BLOQUEADO"
  					   :order 14)))))
  		    (tags "personal/HECHO"
  			  ((org-agenda-overriding-header " Tareas Hechas")))))
  		  ))

  (setq org-agenda-time-grid
      '((daily)
        ( 0500 0600 0700 0800 0900 1000
          1100 1200 1300 1400 1500 1600
          1700 1800 1900 2000 2100 2200)
        "......" "----------------"))

  (setq calendar-month-name-array
  	["Enero" "Febrero" "Marzo" "Abril" "Mayo" "Junio"
  	 "Julio"    "Agosto"   "Septiembre" "Octubre" "Noviembre" "Diciembre"])

  (setq calendar-day-name-array
  	["Domingo" "Lunes" "Martes" "Miércoles" "Jueves" "Viernes" "Sábado"])

  (setq org-icalendar-timezone "America/Santiago") ;; timezone
  (setq calendar-week-start-day 1) ;; la semana empieza el lunes
  (setq european-calendar-style t) ;; estilo europeo
#+end_src

*** org-modern
#+begin_src emacs-lisp :results silent
  (use-package org-modern
   :ensure '(org-modern :host github :repo "minad/org-modern")
   :custom
   ;(org-modern-hide-stars nil)              
   (org-modern-table nil)
   (org-modern-list '((?* . "•") (?+ . "‣")))
   (org-modern-checkbox '((?X . "✓") (?- . "✗") (?\s . "⬚")))
   (org-modern-star '("◉" "●" "◎" "⊙" "⊚" "⊛" "∙" "∘" "☉"  "❍" "○" "◌" "⚬" "￮" "◦"))
   
   (org-modern-block-name '("" . ""))
   :hook
   (org-mode . org-modern-mode)
   (org-agenda-finalize . org-modern-agenda))
#+end_src

*** org-modern-indent
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package compat
      :ensure (:wait t)
      :demand t)
  (use-package org-modern-indent
    :load-path "~/.emacs.d/org-modern-indent/"
    ;:after org-modern 
    :config
    (add-hook 'org-mode-hook #'org-modern-indent-mode 80))
  (setq org-startup-indented t)
#+end_src

*** org-roam
Configuración de org-roam estandar, par mi dropbox
#+begin_src emacs-lisp :results silent
  (elpaca org-roam
    :ensure t)
  (setq org-roam-v2-ack t)
  (setq org-roam-directory (file-truename "~/Dropbox/org-roam/"))
  (setq org-roam-db-autosync-mode t)
  (setq org-roam-completion-everywhere t)
#+end_src

*** org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui
  :ensure
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
*** org-auto-fill
Permite reformatear el texto automaticamente al ancho preestablecido
en fill-column 
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

*** olivetti
Oliveti permite centrar el texto en un documento para mejorar la lectura y la edicion del contenido
#+begin_src emacs-lisp
;  (use-package olivetti
;      :ensure (:wait t)
;      :demand t)
;  (add-hook 'org-mode-hook 'olivetti-mode)
;  (setq olivetti-body-width 0.7)

(use-package olivetti
  :ensure t
  :hook (org-mode . my/org-mode-olivetti)
  :config
  (setq olivetti-body-width 0.9))

(defun my/org-mode-olivetti ()
  "Activar Olivetti en Org-Mode con ancho personalizado."
  (olivetti-mode 1)
  (setq olivetti-body-width 0.9))

#+end_src

** Calendar

#+BEGIN_SRC emacs-lisp
    (use-package calfw
    :ensure t
    (calfw
      :host github
      :repo "kiwanami/emacs-calfw")
    :config
    (setq cfw:org-overwrite-default-keybinding t))

  (use-package calfw-org
      :ensure t
      :config
      (setq cfw:org-overwrite-default-keybinding t)
      :bind ([f8] . cfw:open-org-calendar))

  (setq calendar-month-name-array
        ["Enero" "Febrero" "Marzo" "Abril" "Mayo" "Junio"
         "Julio"    "Agosto"   "Septiembre" "Octubre" "Noviembre" "Diciembre"])

  (setq calendar-day-name-array
        ["Domingo" "Lunes" "Martes" "Miércoles" "Jueves" "Viernes" "Sábado"])

  (setq org-icalendar-timezone "America/Santiago")
  (setq calendar-week-start-day 1)
  (setq european-calendar-style t)
#+END_SRC
** Terraform
Agrega terraform-mode para formateo de sintaxys terraform

#+begin_src emacs-lisp
(elpaca terraform-mode
  :ensure t
  :config
  (defun my-terraform-mode-init ()
    ;; Si deseas habilitar `outline-minor-mode`
    ;; (outline-minor-mode 1)

    ;; Configuración de indentación
    (setq tab-width 4))

  (add-hook 'terraform-mode-hook 'my-terraform-mode-init))

#+end_src
** Python
Aqui configuro LSP de tal forma que quede preparado para desarrollo en *Emacs*.

/Pylsp/ Servidor de python de microsoft
#+BEGIN_SRC sh :results silent
  # Herramientas esenciales para LSP y formateo
  pipx install mypy                # Type checking
  pipx install "python-lsp-server[all]"  # Servidor LSP de Python (pylsp)
  pipx install black               # Formateador automÃ¡tico
  pipx install isort               # Organizador de imports
  pipx install ruff                # Linter rÃ¡pido (reemplaza flake8 + isort)

  # Pyright (alternativa LSP de Microsoft)
  # NOTA: Pyright es una herramienta Node.js, instálalo con npm:
  npm install -g pyright
#+END_SRC
Ahora, configuramos el entorno de desarrollo de emacs para python
#+BEGIN_SRC emacs-lisp :results silent
  ;; Configuración de LSP para Python
  (use-package lsp-pyright
    :ensure t
    :custom
    (lsp-pyright-langserver-command "pyright-langserver --stdio --log-level trace")  ;; Usamos un string único
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))
  ;; YASnippet para snippets
  (elpaca yasnippet
    :ensure t)

  ;; LSP Mode y Pyright
  (elpaca lsp-mode
    :ensure t
    :config
    (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)  ;; Habilitar Imenu para navegación rápida
    (require 'lsp-pyright))

  ;; Activar LSP en Python
  (add-hook 'python-mode-hook #'lsp-deferred)

  ;; Usar Pipenv automáticamente cuando el archivo esté en un entorno Pipenv
  (add-hook 'python-mode-hook #'pipenv-mode)

  ;; Black para formateo automático
  ;(use-package python-black
  ;  :ensure t
  ;  :hook (python-mode . python-black-on-save-mode)
  ;  :custom
  ;  (blacken-line-length 79))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Black - Formateo al guardar
  (use-package python-black
    :ensure t
    :hook (python-mode . (lambda ()
                         (python-black-on-save-mode)
                         (setq blacken-line-length 79))) ; Fuerza 79 caracteres
    :custom
    (python-black-extra-args '("--line-length=79" "--fast"))) ; Args CLI explícitos

  ;; Deshabilitar formateo del LSP
  (setq lsp-enable-format nil)

  ;; Orden de ejecución: isort → black
  (add-hook 'python-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'py-isort-before-save nil 'local)
              (add-hook 'before-save-hook 'python-black-buffer nil 'local)))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq blacken-line-length 79)
  ;; Py-Isort para organizar imports automáticamente antes de guardar
  (use-package py-isort
    :ensure t
    :hook (python-mode . py-isort-before-save))

  ;; Flymake-ruff para linting (si estás usando Flymake en vez de Flycheck)
  (add-to-list 'load-path "~/.emacs.d/flymake-ruff")
  (require 'flymake-ruff)
  (add-hook 'python-mode-hook #'flymake-ruff-load)

  ;; Opcional: Si quieres usar Pylint junto con Flycheck (aunque tú ya usas Pyright)
  (add-hook 'python-mode-hook 'set-flycheck-python-pylint-executable)

  ;; Integrar Company Mode para autocompletado con LSP
  (use-package company
    :ensure t
    :hook (python-mode . company-mode)
    :config
    (setq company-idle-delay 0.2)  ;; Ajustar el retraso para autocompletado
    (setq company-minimum-prefix-length 1)  ;; Autocompletar con solo una letra
    (setq company-tooltip-limit 10))  ;; Limitar la cantidad de sugerencias en el menú

  ;; Integrar LSP UI para ver la documentación y más con LSP

  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-enable t)       ;; Habilitar la documentación emergente
    (lsp-ui-doc-use-webkit t)   ;; Usar un visor web para la documentación
    (lsp-ui-doc-include-signature t)  ;; Incluir la firma de la función en la doc
    (lsp-ui-sideline-enable t)  ;; Mostrar la línea lateral de sugerencias
    (lsp-ui-doc-show-with-cursor t)
    (lsp-ui-doc-show-with-mouse t)
    (lsp-ui-doc-delay 0.5)
    (lsp-ui-doc-position 'at-point)
    (lsp-headerline-breadcrumb-enable t)
    (lsp-lens-enable t)
    ;; (lsp-ui-sideline-delay 0.5) ;; Retardo de las sugerencias
    )
  ;(setq lsp-ui-doc-use-webkit t)
#+END_SRC

#+begin_src emacs-lisp :results silent
  (add-hook 'python-mode-hook 'set-flycheck-python-pylint-executable)
#+end_src

** git [3/3]
Estos son los paquetes que suelo usar con git en mi dia a dia para desarrollo
- [X] magit es un gestor de repositorios git interactivo y muy poderoso
- [X] git-gutter muestra en los archivos que lineas se agregan, elimina y modifica
- [X] git-timemachine permite interactivamente las modificaciones se hicieron
*** Magit
#+BEGIN_SRC emacs-lisp
(use-package transient :ensure t :demand t)
(use-package magit :ensure (:wait t) :demand t)
#+END_SRC

Magit repositories
#+begin_src emacs-lisp :results silent
  (setq magit-repository-directories
        '(("~/develop" . 3)))
#+end_src

Dividir la ventana de forma vertical en vez de horizontal en /Ediff/
#+begin_src emacs-lisp
(setq ediff-split-window-function 'split-window-sensibly)
#+end_src

#+begin_src emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

*** git-gutter
Esta herramienta agrega indicadores para identificar los cambios miesntras programo
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure (:wait t)
    :demand t
    )
  (global-git-gutter-mode +1)
  (custom-set-variables
   '(git-gutter:modified-sign "M")
   '(git-gutter:added-sign "+")
   '(git-gutter:deleted-sign "-"))
#+END_SRC

#+RESULTS:

*** git-timemachine
Herramienta que me permite observar un archivo de manera interactiva para ver sus versiones en tiempo real
#+BEGIN_SRC emacs-lisp
  (elpaca git-timemachine
  :ensure t)
#+END_SRC


* Tempo
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+BEGIN_SRC emacs-lisp :results silent
  (require 'org-tempo)
#+END_SRC

* end
#+BEGIN_SRC emacs-lisp
(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+END_SRC



* latex


$e^{i\pi} = -1$

$$
\int_0^\infty e^{-x^2} dx = \frac{\sqrt{\pi}}{2}
$$
